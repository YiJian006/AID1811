前情回顾

1. 进程间通信
   共享内存 ： 在内存中开辟空间，只能存一组数据，效率
               高
        Value() --> 单一数据
	Array() --> 数据结构
   
   信号量 ： Semaphore（） 创建信号量
             acquire（） 消耗
	     release() 增加

2. 创建多线程
       threading --> Thread

           Thread()  创建线程对象
	   start()   启动线程
	   join()    回收线程
	
	线程对象属性
	   t.name  名称
	   t.daemon 主线程退出后分支线程是否退出
	   t.is_alive()  查看状态
	   currentThread() 获取线程对象
	
	自定义线程类 
	   1. 继承Thread
	   2. 编写自己的__init__
	   3. 重写run


3. 线程的同步互斥

   Event()
	e.set()  e.wait() e.clear()  e.is_set()

   Lock()
        acquire()   release()

4.线程的GIL问题
      全局解释器锁：同一时刻只有一个线程被解释，直接               导致python线程效率低下
*******************************************************

方案2惺惺惜惺惺x
